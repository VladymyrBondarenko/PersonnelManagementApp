@page "/login"

@using AutoMapper
@using Blazored.FluentValidation
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using PersonnelManagement.Contracts.v1.Requests.Identity
@using PersonnelManagement.WebClient.Infrastructure.Managers.Identity
@using PersonnelManagement.WebClient.Models
@using System.Security.Claims
@layout MainLayout
@attribute [AllowAnonymous]

@inject IIdentityManager identityManager
@inject ISnackbar snackBar
@inject IMapper mapper
@inject NavigationManager navManager
@inject AuthenticationStateProvider authStateProvider

<EditForm Model="@loginModel" OnValidSubmit="SubmitAsync">
    <FluentValidationValidator @ref="_fluentValidationValidator" />
    <MudGrid>
        <MudItem xs="12">
            <div class="d-flex justify-center">
                <MudIcon Icon="@Icons.Filled.AppRegistration" Color="Color.Primary" Size="Size.Large" ViewBox="0 0 500 500" Style="width: 100px; height: 100px;" />
            </div>
        </MudItem>
        <DataAnnotationsValidator />
        <MudItem xs="12">
            <div class="d-flex justify-center">
                <MudText Typo="Typo.h4">Title</MudText>
            </div>
        </MudItem>
        <MudItem xs="12">
            <div class="d-flex justify-center">
                <MudText>Description</MudText>
            </div>
        </MudItem>
        <MudItem xs="12">
            <div class="d-flex justify-center">
                <MudText>Don't have an account? <MudLink Href="/register">Register here</MudLink></MudText>
            </div>
        </MudItem>
        <MudItem xs="12">
            <MudTextField T="string" Label="E-mail" Variant="Variant.Outlined"
                          @bind-Value="loginModel.Email" For="@(() => loginModel.Email)" />
        </MudItem>
        <MudItem xs="12">
            <MudTextField Label="Password" Variant="Variant.Outlined"
                          @bind-Value="loginModel.Password" For="@(() => loginModel.Password)"
                          InputType="@_passwordInput" Adornment="Adornment.End" AdornmentIcon="@_passwordInputIcon" OnAdornmentClick="TogglePasswordVisibility" />
        </MudItem>
        <MudItem xs="12" Class="d-flex justify-space-between align-center">
            <MudCheckBox T="bool" Label="Remember me?" Color="Color.Primary" Class="ml-n1"></MudCheckBox> <MudLink Href="/account/forgot-password">Forgot password?</MudLink>
        </MudItem>
        <MudItem xs="12" Class="d-flex justify-center">
            <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Disabled="@(!Validated)" Color="Color.Primary" Size="Size.Large" Style="width: 100%;">Sign In</MudButton>
        </MudItem>
        <MudItem xs="12">
            <MudButton OnClick="FillAdministratorCredentials">Fill Administrator Credentials</MudButton>
        </MudItem>
        <MudItem xs="12">
            <MudButton OnClick="FillBasicUserCredentials">Fill Basic User Credentials</MudButton>
        </MudItem>
    </MudGrid>
</EditForm>

@code{

    private FluentValidationValidator _fluentValidationValidator;
    private bool Validated => _fluentValidationValidator.Validate(options => { options.IncludeAllRuleSets(); });
    private LoginModel loginModel = new();

    protected override async Task OnInitializedAsync()
    {
        var state = await authStateProvider.GetAuthenticationStateAsync();
        if (state != new AuthenticationState(new ClaimsPrincipal(new ClaimsIdentity())))
        {
            navManager.NavigateTo("/");
        }
    }

    private async Task SubmitAsync()
    {
        var response = await identityManager.LoginAsync(mapper.Map<UserLoginRequest>(loginModel));
        if (string.IsNullOrWhiteSpace(response?.Data?.Token))
        {
            snackBar.Add("Login or password is not correct", Severity.Error);
        }
        else
        {
            snackBar.Add("Authorizations successed", Severity.Success);
            navManager.NavigateTo("/");
        }
    }

    private bool _passwordVisibility;
    private InputType _passwordInput = InputType.Password;
    private string _passwordInputIcon = Icons.Material.Filled.VisibilityOff;

    private void TogglePasswordVisibility()
    {
        if (_passwordVisibility)
        {
            _passwordVisibility = false;
            _passwordInputIcon = Icons.Material.Filled.VisibilityOff;
            _passwordInput = InputType.Password;
        }
        else
        {
            _passwordVisibility = true;
            _passwordInputIcon = Icons.Material.Filled.Visibility;
            _passwordInput = InputType.Text;
        }
    }

    private void FillAdministratorCredentials()
    {
        loginModel.Email = "mukesh@blazorhero.com";
        loginModel.Password = "123Pa$$word!";
    }

    private void FillBasicUserCredentials()
    {
        loginModel.Email = "john@blazorhero.com";
        loginModel.Password = "123Pa$$word!";
    }
}