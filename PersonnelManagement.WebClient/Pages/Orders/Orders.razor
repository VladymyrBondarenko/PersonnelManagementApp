@using System.Net.Http.Json
@using System.Collections.ObjectModel
@using AutoMapper
@using PersonnelManagement.Contracts.v1.Requests.Queries
@using PersonnelManagement.Contracts.v1.Responses.Departments
@using PersonnelManagement.Contracts.v1.Responses.Orders
@using PersonnelManagement.Domain.Orders
@using PersonnelManagement.Sdk.Orders
@using PersonnelManagement.WebClient.Infrastructure.Managers.Orders
@using PersonnelManagement.WebClient.Pages.Dialogs.Orders
@using Refit
@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations
@using static PersonnelManagement.WebClient.Pages.Orders.OrdersDescription
@using static PersonnelManagement.WebClient.Pages.OrgStruct.Departments
@using static PersonnelManagement.WebClient.Pages.OrgStruct.Positions

@inject IOrderDescriptionManager orderDescManager
@inject IOrderManager orderManager
@inject IDialogService dialogService
@inject IMapper mapper

@page "/orders"

<MudGrid>
    <MudItem xs="12">
        <MudGrid Justify="Justify.FlexStart">
            <MudItem xs="2" Style="padding: 5px">
                <MudPaper Class="d-flex mud-width-full py-12" Outlined="true" Width="100%" Height="1000px" Elevation="0">
                    <MudNavMenu Rounded="true" Margin="Margin.Dense" Color="Color.Primary" Class="pa-2" Style="width: 100%">
                        @foreach(var record in OrderDescModels)
                        {
                            <MudNavLink OnClick="@(() => SelectOrderDesc(record.Id))" Icon="@getIcon(record)">@record.OrderDescriptionTitle</MudNavLink>
                        }
                    </MudNavMenu>
                </MudPaper>
            </MudItem>
            <MudItem xs="10" Style="padding: 5px; height: 100%">
                <div class="orderdesc-add-btn">
                    <MudButton OnClick="@AddRow" Color="@Color.Success" Class="add-item-btn">Add order</MudButton>
                </div>
                <MudPaper Width="100%" Height="100%" Class="d-flex mud-width-full">
                    <MudTable ServerData="@(new Func<TableState, Task<TableData<OrderModel>>>(LoadOrdersData))"
                            Dense="true" @ref="table" Style="width: 100%; height:100%"
                            Hover="true" Bordered="true" Striped="true" @bind-SelectedItem="selectedOrder">
                        <ToolBarContent>
                            <MudText Typo="Typo.h6"></MudText>
                            <MudSpacer />
                            <MudTextField TextChanged="@(() => FilterFunc())" @bind-Value="searchItem" Placeholder="Search" 
                                Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" 
                                IconSize="Size.Medium" Class="mt-0"></MudTextField>
                        </ToolBarContent>
                        <HeaderContent>
                            <MudTh>Order State</MudTh>
                            <MudTh>First Name</MudTh>
                            <MudTh>Last Name</MudTh>
                            <MudTh>Department</MudTh>
                            <MudTh>Position</MudTh>
                            <MudTh>Date From</MudTh>
                            <MudTh>Date To</MudTh>
                        </HeaderContent>
                        <RowTemplate>
                            <MudTd DataLabel="OrderState">@context.OrderState</MudTd>
                            <MudTd DataLabel="FirstName">@context.FirstName</MudTd>
                            <MudTd DataLabel="LastName">@context.LastName</MudTd>
                            <MudTd DataLabel="Department">@context.Department?.DepartmentTitle</MudTd>
                            <MudTd DataLabel="Position">@context.Position?.PositionTitle</MudTd>
                            <MudTd DataLabel="DateFrom">@context.DateFrom?.ToShortDateString()</MudTd>
                            <MudTd DataLabel="DateTo">@context.DateTo?.ToShortDateString()</MudTd>
                            <MudTd>
                                <div class="orderdesc-edit-btn">
                                    <MudIconButton OnClick="@(() => EditRow(context))" ButtonType="MudBlazor.ButtonType.Button" 
                                        Icon="@Icons.Material.Filled.Edit" aria-label="edit"></MudIconButton>
                                </div>
                            </MudTd>
                            <MudTd>
                                <div class="orderdesc-delete-btn">
                                    <MudIconButton OnClick="@(() => DeleteRow(context))" ButtonType="MudBlazor.ButtonType.Button" 
                                        Icon="@Icons.Material.Filled.Delete" aria-label="delete"></MudIconButton>
                                </div>
                            </MudTd>
                        </RowTemplate>
                        <PagerContent>
                            <MudTablePager PageSizeOptions="pageSizeOptions" />
                        </PagerContent>
                    </MudTable>
                </MudPaper>
            </MudItem>
        </MudGrid>
    </MudItem>
</MudGrid>

@code {
    private string searchItem = "";
    private int[] pageSizeOptions = new int[] { 5, 10, 15 };
    private bool isOpen;
    private OrderModel selectedOrder = null;
    private Guid selectedOrderDescId;

    public class OrderModel
    {
        public Guid Id { get; set; }

        [Display(Name = "First Name")]
        [Required]
        public string FirstName { get; set; }

        [Display(Name = "Last Name")]
        [Required]
        public string LastName { get; set; }

        [Display(Name = "Date From")]
        [Required]
        public DateTime? DateFrom { get; set; }

        public DateTime? DateTo { get; set; }

        [Display(Name = "Department")]
        [Required]
        public DepartmentModel Department { get; set; }

        public Guid? DepartmentId { get; set; }

        [Display(Name = "Position")]
        [Required]
        public PositionModel Position { get; set; }

        public Guid? PositionId { get; set; }

        public OrderDescriptionModel OrderDescription { get; set; }

        public Guid? OrderDescriptionId { get; set; }

        public OrderState OrderState { get; set; }
    }

    private MudTable<OrderModel> table;

    private List<OrderDescriptionModel> OrderDescModels = new ();

    protected override async Task OnInitializedAsync()
    {
        await LoadDescriptionsData();

        await SelectOrderDesc(OrderDescModels.FirstOrDefault()?.Id ?? default);
    }

    private async Task LoadDescriptionsData()
    {
        var response = await orderDescManager.GetAllAsync();

        var data = response.Content?.Data?.ToList();

        if(data != null)
        {
            OrderDescModels = mapper.Map<List<OrderDescriptionModel>>(data);
        }
    }

    private async Task FilterFunc()
    {
        await Reset();
    }

    private async Task AddRow()
    {
        var parameters = new DialogParameters 
        { 
            ["OrderModel"] = new OrderModel(),
            ["OrderDescId"] = selectedOrderDescId
        };

        var dialog = dialogService.Show<AddOrderDialog>("Add order", parameters);

        var result = await dialog.Result;
        if (!result.Cancelled)
        {
            await Reset();
        }
    }

    private async Task EditRow(OrderModel element)
    {
        var parameters = new DialogParameters 
        { 
            ["OrderModel"] = element,
            ["OrderDescId"] = selectedOrderDescId
        };

        var dialog = dialogService.Show<AddOrderDialog>("Edit order", parameters);

        var result = await dialog.Result;
        if (!result.Cancelled)
        {
            await Reset();
        }
    }

    private async Task DeleteRow(OrderModel element)
    {
        var parameters = new DialogParameters 
        { 
            ["OrderModel"] = element
        };

        var dialog = dialogService.Show<DeleteOrderDialog>("Delete order", parameters);

        var result = await dialog.Result;
        if (!result.Cancelled)
        {
            await Reset();
        }
    }

    private async Task SelectOrderDesc(Guid orderDescId)
    {
        selectedOrderDescId = orderDescId;
        await FilterFunc();
    }

    private async Task<TableData<OrderModel>> LoadOrdersData(TableState state)
    {
        var grid = new TableData<OrderModel>();

        if(selectedOrderDescId != default)
        {
            var query = new GetAllOrdersQuery { SearchText = searchItem, OrderDescriptionId = selectedOrderDescId };

            var response = await orderManager.GetAllAsync(new Contracts.v1.Requests.PaginationQueryRequest 
            { 
                PageNumber = state.Page + 1, PageSize = state.PageSize 
            }, query);

            var data = response?.Content?.Data;
            if(data != null)
            {
                grid.Items = mapper.Map<List<OrderModel>>(data);
                grid.TotalItems = response.Content.TotalAmount;
            }
        }

        return grid;
    }

    private async Task Reset()
    {
        await table.ReloadServerData();
    }

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        table.SetRowsPerPage(5);
        return base.OnAfterRenderAsync(firstRender);
    }

    private string getIcon(OrderDescriptionModel orderDesc)
    {
        // maybe later add logic to add icon to order description, for now constant
        var icon = orderDesc.OrderType switch
        {
            OrderType.HireOrder => Icons.Filled.WorkOutline,
            OrderType.FireOrder => Icons.Filled.WorkOff,
            _ => ""
        };
        return icon;
    }
}