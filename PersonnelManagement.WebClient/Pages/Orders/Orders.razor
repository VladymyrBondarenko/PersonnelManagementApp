@page "/orders"
@attribute [Microsoft.AspNetCore.Authorization.Authorize()]

@using System.Net.Http.Json
@using System.Collections.ObjectModel
@using AutoMapper
@using Microsoft.AspNetCore.Http
@using PersonnelManagement.Contracts.v1.Requests.Originals
@using PersonnelManagement.Contracts.v1.Requests.Queries
@using PersonnelManagement.Contracts.v1.Responses.Departments
@using PersonnelManagement.Contracts.v1.Responses.Orders
@using PersonnelManagement.Domain.Models.Originals
@using PersonnelManagement.Domain.Orders
@using PersonnelManagement.Sdk.Orders
@using PersonnelManagement.WebClient.Infrastructure.Managers.Orders
@using PersonnelManagement.WebClient.Infrastructure.Managers.Originals
@using PersonnelManagement.WebClient.Models
@using PersonnelManagement.WebClient.Pages.Dialogs.Orders
@using Refit
@using System.Text.RegularExpressions
@using System.Net.Http.Headers
@using System.Text
@using static PersonnelManagement.WebClient.Pages.Originals.Originals
@using static PersonnelManagement.WebClient.Pages.Employees.Employees
@using static PersonnelManagement.WebClient.Pages.Orders.OrdersDescription
@using static PersonnelManagement.WebClient.Pages.OrgStruct.Departments
@using static PersonnelManagement.WebClient.Pages.OrgStruct.Positions

@inject IOrderDescriptionManager orderDescManager
@inject IOrderManager orderManager
@inject IOriginalManager originalService
@inject IDialogService dialogService
@inject IMapper mapper
@inject ISnackbar snackBar
@inject IJSRuntime jsRuntime
@inject NavigationManager navManager

<MudGrid>
    <MudItem xs="12">
        <MudGrid Justify="Justify.FlexStart">
            <MudItem xs="2" Style="padding: 5px">
                <MudPaper Class="d-flex mud-width-full py-12" Outlined="true" Width="100%" Height="1000px" Elevation="0">
                    <MudNavMenu Rounded="true" Margin="Margin.Dense" Color="Color.Primary" Class="pa-2" Style="width: 100%">
                        @foreach(var record in OrderDescModels)
                        {
                            <MudNavLink Class="@GetOrderDescClass(record)" OnClick="@(() => SelectOrderDesc(record))" Icon="@GetIcon(record)">@record.OrderDescriptionTitle</MudNavLink>
                        }
                    </MudNavMenu>
                </MudPaper>
            </MudItem>
            <MudItem xs="10" Style="padding: 5px; height: 100%">
                <div class="orderdesc-add-btn">
                    <MudButton OnClick="@AddRow" Color="@Color.Success" Class="add-item-btn">Add order</MudButton>
                </div>
                <MudPaper Width="100%" Height="100%" Class="d-flex mud-width-full">
                    <MudTable ServerData="@(new Func<TableState, Task<TableData<OrderModel>>>(LoadOrdersData))"
                            Dense="true" @ref="table" Style="width: 100%; height:100%"
                            Hover="true" Bordered="true" Striped="true" @bind-SelectedItem="selectedOrder">
                        <ToolBarContent>
                            <MudText Typo="Typo.h6"></MudText>
                            <MudSpacer />
                            <MudTextField TextChanged="@(() => FilterFunc())" @bind-Value="searchItem" Placeholder="Search" 
                                Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" 
                                IconSize="Size.Medium" Class="mt-0"></MudTextField>
                        </ToolBarContent>
                        <HeaderContent>
                            <MudTh>Order State</MudTh>
                            <MudTh>First Name</MudTh>
                            <MudTh>Last Name</MudTh>
                            <MudTh>Department</MudTh>
                            <MudTh>Position</MudTh>
                            <MudTh>Date From</MudTh>
                            <MudTh>Date To</MudTh>
                        </HeaderContent>
                        <RowTemplate>
                            <MudTd DataLabel="OrderState">@context.OrderState</MudTd>
                            <MudTd DataLabel="FirstName">@context.FirstName</MudTd>
                            <MudTd DataLabel="LastName">@context.LastName</MudTd>
                            <MudTd DataLabel="Department">@context.Department?.DepartmentTitle</MudTd>
                            <MudTd DataLabel="Position">@context.Position?.PositionTitle</MudTd>
                            <MudTd DataLabel="DateFrom">@context.DateFrom?.ToShortDateString()</MudTd>
                            <MudTd DataLabel="DateTo">@context.DateTo?.ToShortDateString()</MudTd>
                            <MudTd>
                                <InputFile id="@($"fileInput-{context.Id}")" OnChange="@((e) => AddOriginal(e, context))" hidden />
                                <MudFab id="@($"add-orig-btn-{context.Id}")" HtmlTag="label" for="@($"fileInput-{context.Id}")" hidden/>
                                <MudMenu Icon="@Icons.Material.Filled.MoreVert">
                                    <MudMenuItem Class="@GetAcceptOrderClass(context)" OnClick="@(() => AcceptOrder(context))" Icon="@Icons.Filled.Check">Accept</MudMenuItem>
                                    <MudMenuItem Class="@GetRollbackOrderClass(context)" OnClick="@(() => RollbackOrder(context))" Icon="@Icons.Filled.Cancel">Rollback</MudMenuItem>
                                    <MudMenuItem Class="@GetEditRowClass(context)" OnClick="@(() => EditRow(context))" Icon="@Icons.Material.Filled.Edit">Edit</MudMenuItem>
                                    <MudMenuItem Class="@GetDeleteRowClass(context)" OnClick="@(() => DeleteRow(context))" Icon="@Icons.Material.Filled.Delete">Delete</MudMenuItem>
                                    <div onclick="@($"document.getElementById('add-orig-btn-{context.Id}').click()")">
                                        <MudMenuItem Class="@GetAddOriginalItemClass(context)" Icon="@Icons.Material.Filled.AttachFile">
                                            Add Original
                                        </MudMenuItem>
                                    </div>
                                    <MudMenuItem Class="@GetViewOriginalItemClass(context)" OnClick="@(() => ViewOriginals(context))" Icon="@Icons.Material.Filled.AttachFile">
                                        View Originals
                                    </MudMenuItem>
                                </MudMenu>
                            </MudTd>
                        </RowTemplate>
                        <PagerContent>
                            <MudTablePager PageSizeOptions="pageSizeOptions" />
                        </PagerContent>
                    </MudTable>
                </MudPaper>
            </MudItem>
        </MudGrid>
    </MudItem>
</MudGrid>

@code {
    private string searchItem = "";
    private int[] pageSizeOptions = new int[] { 5, 10, 15 };
    private bool isOpen;
    private OrderModel selectedOrder;
    private OrderDescriptionModel selectedOrderDesc;

    private MudTable<OrderModel> table;

    private List<OrderDescriptionModel> OrderDescModels = new ();

    protected override async Task OnInitializedAsync()
    {
        await LoadDescriptionsData();

        await SelectOrderDesc(OrderDescModels.FirstOrDefault());
    }

    private async Task LoadDescriptionsData()
    {
        var response = await orderDescManager.GetAllAsync();

        var data = response?.Data?.ToList();

        if(data != null)
        {
            OrderDescModels = mapper.Map<List<OrderDescriptionModel>>(data);
        }
    }

    private async Task FilterFunc()
    {
        await Reset();
    }

    private async Task AddRow()
    {
        DialogResult result = null;

        if(selectedOrderDesc?.OrderType == OrderType.HireOrder)
        {
            var parameters = new DialogParameters 
            { 
                ["OrderModel"] = new OrderModel(),
                ["OrderDescId"] = selectedOrderDesc?.Id
            };

            var dialog = dialogService.Show<AddHireOrderDialog>("Add hire order", parameters);
            result = await dialog.Result;
        }
        else if(selectedOrderDesc?.OrderType == OrderType.FireOrder)
        {
            var parameters = new DialogParameters 
            { 
                ["OrderModel"] = new OrderModel(),
                ["OrderDescId"] = selectedOrderDesc?.Id
            };

            var dialog = dialogService.Show<AddFireOrderDialog>("Add fire order", parameters);
            result = await dialog.Result;
        }

        if (!result.Cancelled)
        {
            await Reset();
        }
    }

    private void ViewOriginals(OrderModel order)
    {
        if (order.Originals.Any())
        {
            navManager.NavigateTo($"/originals/{order.Id}/{(int)OriginalEntity.Orders}");
        }
    }

    private async Task AddOriginal(InputFileChangeEventArgs e, OrderModel order)
    {
        if(order?.Id == default)
        {
            return;
        }

        if (!order.Originals.Any())
        {
            var file = e.File;

            if(file != null)
            {
                using var stream = file.OpenReadStream(file.Size);

                var streamPart = new StreamPart(stream, file.Name, "multipart/form-data");
                var resp = await originalService.CreateAsync(
                    (int)OriginalEntity.Orders, (int)OriginalType.SimpleOriginal, order.Id, streamPart);
                var data = resp?.Data;

                if (data != null)
                {
                    await Reset();

                    snackBar.Add("Attachment successfully added!", Severity.Success);

                    navManager.NavigateTo($"/originals/{order.Id}/{(int)OriginalEntity.Orders}");
                }
                else
                {
                    snackBar.Add("Attachment cannot be added!", Severity.Error);
                }
            }
        }
    }

    private async Task FireInputForm(Guid orderId)
    {
        await jsRuntime.InvokeVoidAsync("click_fileinput", orderId.ToString());
    }

    private string GetAddOriginalItemClass(OrderModel order)
    {
        if (order.Originals.Any())
        {
            return "add-original-item-hidden";
        }
        else
        {
            return "add-original-item-visible";
        }
    }

    private string GetViewOriginalItemClass(OrderModel order)
    {
        if (!order.Originals.Any())
        {
            return "view-original-item-hidden";
        }
        else
        {
            return "view-original-item-visible";
        }
    }

    private string GetEditRowClass(OrderModel order)
    {
        if(order.OrderState == OrderState.Accepted)
        {
            return "edit-btn-hidden";
        }
        else
        {
            return "edit-btn-visible";
        }
    }

    private async Task EditRow(OrderModel element)
    {
        DialogResult result = null;

        if(selectedOrderDesc?.OrderType == OrderType.HireOrder)
        {
            var parameters = new DialogParameters 
            { 
                ["OrderModel"] = element,
                ["OrderDescId"] = selectedOrderDesc?.Id
            };

            var dialog = dialogService.Show<AddHireOrderDialog>("Edit hire order", parameters);
            result = await dialog.Result;
        }
        else if(selectedOrderDesc?.OrderType == OrderType.FireOrder)
        {
            var parameters = new DialogParameters 
            { 
                ["OrderModel"] = element,
                ["OrderDescId"] = selectedOrderDesc?.Id
            };

            var dialog = dialogService.Show<AddFireOrderDialog>("Edit fire order", parameters);
            result = await dialog.Result;
        }

        if (!result.Cancelled)
        {
            await Reset();
        }
    }

    private string GetDeleteRowClass(OrderModel order)
    {
        if(order.OrderState == OrderState.Accepted)
        {
            return "delete-btn-hidden";
        }
        else
        {
            return "delete-btn-visible";
        }
    }

    private async Task DeleteRow(OrderModel element)
    {
        var parameters = new DialogParameters 
        { 
            ["OrderModel"] = element
        };

        var dialog = dialogService.Show<DeleteOrderDialog>("Delete order", parameters);

        var result = await dialog.Result;
        if (!result.Cancelled)
        {
            await Reset();
        }
    }

    private string GetAcceptOrderClass(OrderModel order)
    {
        if(order.OrderState == OrderState.Accepted)
        {
            return "accept-order-btn-hidden";
        }
        else
        {
            return "accept-order-btn-visible";
        }
    }

    private async Task AcceptOrder(OrderModel order)
    {
        var response = await orderManager.AcceptOrder(order.Id);

        var data = response?.Data;
        if(data != null)
        {
            var success = data.Success;

            if (success)
            {
                await Reset();

                snackBar.Add("Order is accepted", Severity.Success);
            }
            else
            {
                snackBar.Add("Order cannot be accepted", Severity.Error);
            }
        }
    }

    private string GetRollbackOrderClass(OrderModel order)
    {
        if(order.OrderState == OrderState.Accepted)
        {
            return "rollback-order-btn-visible";
        }
        else
        {
            return "rollback-order-btn-hidden";
        }
    }

    private async Task RollbackOrder(OrderModel order)
    {
        var response = await orderManager.RollbackOrder(order.Id);

        var data = response?.Data;
        if(data != null)
        {
            var success = data.Success;

            if (success)
            {
                await Reset();

                snackBar.Add("Order is rollback", Severity.Success);
            }
            else
            {
                snackBar.Add("Order cannot be rollback", Severity.Error);
            }
        }
    }

    private async Task SelectOrderDesc(OrderDescriptionModel orderDesc)
    {
        selectedOrderDesc = orderDesc;
        await FilterFunc();

        StateHasChanged();
    }

    private async Task<TableData<OrderModel>> LoadOrdersData(TableState state)
    {
        var grid = new TableData<OrderModel>();

        if(selectedOrderDesc?.Id != null)
        {
            var query = new GetAllOrdersQuery { SearchText = searchItem, OrderDescriptionId = selectedOrderDesc.Id };

            var response = await orderManager.GetAllAsync(new Contracts.v1.Requests.PaginationQueryRequest 
            { 
                PageNumber = state.Page + 1, PageSize = state.PageSize 
            }, query);

            var data = response?.Data;
            if(data != null)
            {
                grid.Items = mapper.Map<List<OrderModel>>(data);
                grid.TotalItems = response?.TotalAmount ?? 0;
            }
        }

        return grid;
    }

    private async Task Reset()
    {
        await table.ReloadServerData();
    }

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        table.SetRowsPerPage(5);
        return base.OnAfterRenderAsync(firstRender);
    }

    private string GetOrderDescClass(OrderDescriptionModel orderDesc)
    {
        if(orderDesc.Id == selectedOrderDesc?.Id)
        {
            return "orderdesc-link-selected";
        }
        else
        {
            return "orderdesc-link-not-selected";
        }
    }

    private string GetIcon(OrderDescriptionModel orderDesc)
    {
        // maybe later add logic to add icon to order description, for now constant
        var icon = orderDesc.OrderType switch
        {
            OrderType.HireOrder => Icons.Filled.WorkOutline,
            OrderType.FireOrder => Icons.Filled.WorkOff,
            _ => ""
        };
        return icon;
    }
}