@page "/employees"
@attribute [Microsoft.AspNetCore.Authorization.Authorize()]

@using System.ComponentModel.DataAnnotations
@using AutoMapper
@using PersonnelManagement.Contracts.v1.Requests.Queries
@using PersonnelManagement.Domain.Employees
@using PersonnelManagement.Domain.Models.Originals
@using PersonnelManagement.WebClient.Infrastructure.Managers.Employees
@using PersonnelManagement.WebClient.Infrastructure.Managers.Originals
@using PersonnelManagement.WebClient.Models
@using Refit
@using static PersonnelManagement.WebClient.Pages.Originals.Originals
@using static PersonnelManagement.WebClient.Pages.OrgStruct.Positions
@using static PersonnelManagement.WebClient.Pages.OrgStruct.Departments

@inject IEmployeeManager employeeManager
@inject IMapper mapper
@inject IOriginalManager originalService
@inject ISnackbar snackBar
@inject IJSRuntime jsRuntime
@inject NavigationManager navManager

<div class="orderdesc-add-btn">
    <MudButton OnClick="@AddRow" Color="@Color.Success" Class="add-item-btn">Add Employee</MudButton>
</div>

<MudTable ServerData="@(new Func<TableState, Task<TableData<EmployeeModel>>>(LoadData))" Dense="true" @ref="table" 
        Hover="true" Bordered="true" Striped="true" @bind-SelectedItem="selectedItem">
    <ToolBarContent>
        <MudText Typo="Typo.h6"></MudText>
        <MudSpacer />
        <MudTextField TextChanged="@(() => FilterFunc())" @bind-Value="searchItem" Placeholder="Search" 
            Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" 
            IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>Employee State</MudTh>
        <MudTh>First Name</MudTh>
        <MudTh>Last Name</MudTh>
        <MudTh>Department</MudTh>
        <MudTh>Position</MudTh>
        <MudTh>Hire Date</MudTh>
        <MudTh>Fire Date</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="OrderState">@context.EmployeeState</MudTd>
        <MudTd DataLabel="FirstName">@context.FirstName</MudTd>
        <MudTd DataLabel="LastName">@context.LastName</MudTd>
        <MudTd DataLabel="Department">@context.Department?.DepartmentTitle</MudTd>
        <MudTd DataLabel="Position">@context.Position?.PositionTitle</MudTd>
        <MudTd DataLabel="DateFrom">@context.HireDate?.ToShortDateString()</MudTd>
        <MudTd DataLabel="DateTo">@context.FireDate?.ToShortDateString()</MudTd>
        <MudTd>
            <InputFile id="@($"fileInput-{context.Id}")" OnChange="@((e) => AddOriginal(e, context))" hidden />
            <MudFab id="@($"add-orig-btn-{context.Id}")" HtmlTag="label" for="@($"fileInput-{context.Id}")" hidden/>
            <MudMenu Icon="@Icons.Material.Filled.MoreVert">
                <div onclick="@($"document.getElementById('add-orig-btn-{context.Id}').click()")">
                    <MudMenuItem Class="@GetAddOriginalItemClass(context)" Icon="@Icons.Material.Filled.AttachFile">
                        Add Original
                    </MudMenuItem>
                </div>
                <MudMenuItem Class="@GetViewOriginalItemClass(context)" OnClick="@(() => ViewOriginals(context))" Icon="@Icons.Material.Filled.AttachFile">
                    View Originals
                </MudMenuItem>
            </MudMenu>
        </MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager PageSizeOptions="pageSizeOptions" />
    </PagerContent>
</MudTable>

@code {

    private string searchItem = "";
    private EmployeeModel selectedItem = null;
    private int[] pageSizeOptions = new int[] { 5, 10, 15 };
    private bool isOpen;

    private MudTable<EmployeeModel> table;

    private async Task FilterFunc()
    {
        await Reset();
    }

    private async Task AddRow()
    {
        //todo
    }

    private async Task EditRow(EmployeeModel model)
    {
        //todo
    }

    private async Task DeleteRow(EmployeeModel model)
    {
        //todo
    }

    private async Task AddOriginal(InputFileChangeEventArgs e, EmployeeModel employee)
    {
        if(employee?.Id == default)
        {
            return;
        }

        if (!employee.Originals.Any())
        {
            var file = e.File;

            if(file != null)
            {
                using var stream = file.OpenReadStream(file.Size);

                var streamPart = new StreamPart(stream, file.Name, "multipart/form-data");
                var resp = await originalService.CreateAsync((int)OriginalEntity.Employees, 
                    (int)OriginalType.SimpleOriginal, employee.Id, streamPart);
                var data = resp?.Data;

                if (data != null)
                {
                    await Reset();

                    snackBar.Add("Attachment successfully added!", Severity.Success);

                    navManager.NavigateTo($"/originals/{employee.Id}/{(int)OriginalEntity.Employees}");
                }
                else
                {
                    snackBar.Add("Attachment cannot be added!", Severity.Error);
                }
            }
        }
    }

    private void ViewOriginals(EmployeeModel employee)
    {
        if (employee.Originals.Any())
        {
            navManager.NavigateTo($"/originals/{employee.Id}/{(int)OriginalEntity.Employees}");
        }
    }

    private string GetAddOriginalItemClass(EmployeeModel employee)
    {
        if (employee.Originals.Any())
        {
            return "add-original-item-hidden";
        }
        else
        {
            return "add-original-item-visible";
        }
    }

    private string GetViewOriginalItemClass(EmployeeModel employee)
    {
        if (!employee.Originals.Any())
        {
            return "view-original-item-hidden";
        }
        else
        {
            return "view-original-item-visible";
        }
    }

    private async Task<TableData<EmployeeModel>> LoadData(TableState state)
    {
        GetAllEmployeesQuery query = null;

        if (!string.IsNullOrWhiteSpace(searchItem))
        {
            query = new GetAllEmployeesQuery { SearchText = searchItem };
        }

        var response = await employeeManager.GetAllAsync(new Contracts.v1.Requests.PaginationQueryRequest 
            { 
                PageNumber = state.Page + 1, PageSize = state.PageSize 
            }, query);

        var data = response?.Data?.ToList();

        var grid = new TableData<EmployeeModel>();
        if(data != null)
        {
            grid.Items = mapper.Map<List<EmployeeModel>>(data);
            grid.TotalItems = response.TotalAmount;
        }
        return grid;
    }

    private async Task Reset()
    {
        await table.ReloadServerData();
    }

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        table.SetRowsPerPage(5);
        return base.OnAfterRenderAsync(firstRender);
    }
}