@page "/departments"
@attribute [Microsoft.AspNetCore.Authorization.Authorize()]

@using System.Globalization
@using PersonnelManagement.Contracts.v1.Requests
@using PersonnelManagement.Contracts.v1.Requests.Queries
@using PersonnelManagement.Contracts.v1.Responses.Departments
@using PersonnelManagement.WebClient.Infrastructure.Managers.Departments
@using System.Net.Http.Json
@using System.ComponentModel.DataAnnotations
@using PersonnelManagement.WebClient.Models
@using PersonnelManagement.WebClient.Pages.Dialogs
@using PersonnelManagement.WebClient.Pages.Dialogs.Departments

@inject IDialogService dialogService
@inject ISnackbar snackBar
@inject IDepartmentManager departmentManager;

<div class="department-add-btn">
    <MudButton OnClick="@AddRow" Color="@Color.Success" Class="add-item-btn">Add Department</MudButton>
</div>

<MudTable ServerData="@(new Func<TableState, Task<TableData<DepartmentModel>>>(LoadData))" Dense="true" @ref="table" 
        Hover="true" Bordered="true" Striped="true" @bind-SelectedItem="selectedItem">
    <ToolBarContent>
        <MudText Typo="Typo.h6"></MudText>
        <MudSpacer />
        <MudTextField TextChanged="@(() => FilterFunc())" @bind-Value="searchItem" Placeholder="Search" 
            Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" 
            IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>Department Title</MudTh>
        <MudTh>Description</MudTh>
        <MudTh>Date From</MudTh>
        <MudTh>Date To</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="DepartmentTitle">@context.DepartmentTitle</MudTd>
            <MudTd DataLabel="Description">@context.DepartmentDescription</MudTd>
            <MudTd DataLabel="DateFrom">@context.DateFrom.Value.ToShortDateString()</MudTd>
            <MudTd DataLabel="DateTo">@context.DateTo.Value.ToShortDateString()</MudTd>
            <MudTd>
            <div class="department-edit-btn">
                <MudIconButton OnClick="@(() => EditRow(context))" ButtonType="MudBlazor.ButtonType.Button" 
                    Icon="@Icons.Material.Filled.Edit" aria-label="edit"></MudIconButton>
            </div>
            </MudTd>
            <MudTd>
            <div class="department-delete-btn">
                <MudIconButton OnClick="@(() => DeleteRow(context))" ButtonType="MudBlazor.ButtonType.Button" 
                    Icon="@Icons.Material.Filled.Delete" aria-label="delete"></MudIconButton>
            </div>
        </MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager PageSizeOptions="pageSizeOptions" />
    </PagerContent>
</MudTable>

@code {

    private string searchItem = "";
    private DepartmentModel selectedItem = null;
    private int[] pageSizeOptions = new int[] { 5, 10, 15 };
    private bool isOpen;

    private MudTable<DepartmentModel> table;

    private async Task FilterFunc()
    {
        await Reset();
    }

    private async Task AddRow()
    {
        var parameters = new DialogParameters { ["model"] = new DepartmentModel() };
        var dialog = dialogService.Show<AddDepartmentDialog>("Add department", parameters);

        var result = await dialog.Result;
        if (!result.Cancelled)
        {
            await Reset();
        }
    }

    private async Task EditRow(DepartmentModel model)
    {
        var parameters = new DialogParameters { ["model"] = model };
        var dialog = dialogService.Show<AddDepartmentDialog>("Edit department", parameters);

        var result = await dialog.Result;
        if (!result.Cancelled)
        {
            await Reset();
        }
    }

    private async Task DeleteRow(DepartmentModel model)
    {
        var parameters = new DialogParameters { ["model"] = model };
        var dialog = dialogService.Show<DeleteDepartmentDialog>("Delete department", parameters);

        var result = await dialog.Result;
        if(!result.Cancelled)
        {
            await Reset();
        }
    }

    private async Task<TableData<DepartmentModel>> LoadData(TableState state)
    {
        GetAllDepartmentsQuery query = null;

        if (!string.IsNullOrWhiteSpace(searchItem))
        {
            query = new GetAllDepartmentsQuery { SearchText = searchItem };
        }

        var response = await departmentManager.GetAllAsync(new Contracts.v1.Requests.PaginationQueryRequest 
            { 
                PageNumber = state.Page + 1, PageSize = state.PageSize 
            }, query);

        var data = response?.Data?.ToList();

        var grid = new TableData<DepartmentModel>();
        if(data != null)
        {
            grid.Items = data.Select(x => new DepartmentModel
            {
                Id = x.Id,
                DepartmentTitle = x.DepartmentTitle,
                DepartmentDescription = x.DepartmentDescription,
                DateFrom = x.DateFrom,
                DateTo = x.DateTo,
                CreatedDate = x.CreatedDate
            }).OrderByDescending(x => x.CreatedDate).ToList();
            grid.TotalItems = response.TotalAmount;
        }
        return grid;
    }

    private async Task Reset()
    {
        await table.ReloadServerData();
    }

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        table.SetRowsPerPage(5);
        return base.OnAfterRenderAsync(firstRender);
    }
}